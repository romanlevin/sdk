syntax = "proto3";
package trinsic.services;

import "google/protobuf/struct.proto";
import "CoreService.proto";
import "pbmse/pbmse.proto";

message CreateWalletRequest {
    string controller = 1;
    string description = 2;

    // (Optional) Supply an invitation id to associate this caller profile
    // to an existing cloud wallet.
    string invitation_id = 3;
}

message CreateWalletResponse {
    ResponseStatus status = 1;

    string wallet_id = 2;
    string capability = 3;
    string invoker = 4; 
}

/*
    Stores profile data for accessing a wallet.
    This result should be stored somewhere safe,
    as it contains private key information.
*/
message WalletProfile {
    google.protobuf.Struct did_document = 1;
    string wallet_id = 2;
    string invoker = 3;
    string capability = 4;
    bytes invoker_jwk = 5;
}

message GrantAccessRequest {
    string wallet_id = 1;
    string did = 2;
}
message GrantAccessResponse {
    ResponseStatus status = 1;
}

message RevokeAccessRequest {
    string wallet_id = 1;
    string did = 2;
}

message RevokeAccessResponse {
    ResponseStatus status = 1;
}

// GetProviderConfiguration

message GetProviderConfigurationRequest {}
message GetProviderConfigurationResponse {
    google.protobuf.Struct did_document = 1;
    string key_agreement_key_id = 2;
}

// Search

message SearchRequest {
    string query = 1;
}

message SearchResponse {
    repeated google.protobuf.Struct items = 1;
    bool has_more = 2;
}

// InsertItem

message InsertItemRequest {
    google.protobuf.Struct item = 1;
    string item_type = 2;
}

message InsertItemResponse {
    ResponseStatus status = 1;
    string item_id = 2;
}

service Wallet {
    rpc GetProviderConfiguration(GetProviderConfigurationRequest) returns (GetProviderConfigurationResponse);

    rpc CreateWallet(CreateWalletRequest) returns (CreateWalletResponse);

    rpc CreateWalletWithWorkflow(CreateWalletRequest) returns (CreateWalletResponse);

    rpc CreateWalletEncrypted(pbmse.EncryptedMessage) returns (pbmse.EncryptedMessage);

    rpc Search(SearchRequest) returns (SearchResponse);

    rpc InsertItem(InsertItemRequest) returns (InsertItemResponse);

    rpc GrantAccess(GrantAccessRequest) returns (GrantAccessResponse);

    rpc RevokeAccess(RevokeAccessRequest) returns (RevokeAccessResponse);
}

