name: ".NET Core"

on:
  pull_request:
    branches:
      - main
    paths:
      - 'dotnet/**'
      - 'proto/**'
  push:
    branches:
      - main
  workflow_dispatch:
  release:
    types: [published, prereleased]

jobs:
  build_test_pack:
    name: Build, Test, Package
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
    steps:
      - uses: actions/checkout@v1
        with:
          submodules: 'recursive'
          token: ${{ secrets.ACCESS_TOKEN }}
      - name: Generate Package Version
        run: |
          $packageVersion = node -p -e "require('./package.json').version"
          $manualVersion = "${{ github.event.release.tag_name }}"
          $version = if ($manualVersion) { $manualVersion } else { $packageVersion }
          $version = $version.TrimStart("v")

          echo "PACKAGE_VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf-8 -Append
        shell: pwsh
      - run: |
          dotnet restore
          dotnet build -c Release
          dotnet test -c Release
        working-directory: ./dotnet/Source
        env:
          TRINSIC_SERVER_ADDRESS: http://pr-development.centralus.azurecontainer.io:5000
      - name: Create Nuget package
        run: dotnet pack -c Release -p:PackageVersion=$env:PACKAGE_VERSION
        shell: pwsh
        working-directory: ./dotnet/Source
      - uses: actions/upload-artifact@v2
        with:
          name: nuget
          path: |
            ./dotnet/**/Release/*.nupkg
            ./dotnet/**/Release/*.snupkg

  dotnet_publish_nuget:
    name: Publish to Nuget
    environment:
      name: nuget.org
    if: |
      github.event_name == 'release' &&
      github.event.action == 'published' &&
      github.release.draft == false &&
      github.release.prerelease == false
    runs-on: windows-latest
    needs: [build_test_pack]
    steps:
      - uses: actions/download-artifact@v2
        with:
          path: ./nuget
      - name: Push packages to Nuget
        run: |
          foreach ($item in get-childitem ./nuget -recurse | select-object FullName | where { $_.FullName.EndsWith("nupkg") })
          {
            nuget push $item.FullName -ApiKey "${{ secrets.NUGET_API_KEY }}" -Source https://api.nuget.org/v3/index.json -SkipDuplicate
          }
        shell: pwsh

  dotnet_publish_github:
    name: Publish to GitHub Packages
    runs-on: windows-latest
    needs: [build_test_pack]
    steps:
      - uses: actions/download-artifact@v2
        with:
          path: ./nuget
      - name: Push packages to Nuget
        run: |
          dotnet nuget add source --username tmarkovski --password ${{ secrets.ACCESS_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/trinsic-id/index.json"
          foreach ($item in get-childitem ./nuget -recurse | select-object FullName | where { $_.FullName.EndsWith("nupkg") })
          {
            nuget push $item.FullName -ApiKey "${{ secrets.ACCESS_TOKEN }}" -Source "github" -SkipDuplicate
          }
        shell: pwsh


