// Code generated by gRPC proto compiler.  DO NOT EDIT!
// source: didcomm.proto

#if !defined(GPB_GRPC_PROTOCOL_ONLY) || !GPB_GRPC_PROTOCOL_ONLY
#import "Didcomm.pbrpc.h"
#import "Didcomm.pbobjc.h"
#import <ProtoRPC/ProtoRPCLegacy.h>
#import <RxLibrary/GRXWriter+Immediate.h>

#import "Security.pbobjc.h"
#if defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS) && GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
#import <Protobuf/GPBStruct.pbobjc.h>
#else
#import "GPBStruct.pbobjc.h"
#endif

@implementation DIDCommPlain

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wobjc-designated-initializers"

// Designated initializer
- (instancetype)initWithHost:(NSString *)host callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [super initWithHost:host
                 packageName:@"didcomm.messaging"
                 serviceName:@"DIDCommPlain"
                 callOptions:callOptions];
}

- (instancetype)initWithHost:(NSString *)host {
  return [super initWithHost:host
                 packageName:@"didcomm.messaging"
                 serviceName:@"DIDCommPlain"];
}

#pragma clang diagnostic pop

// Override superclass initializer to disallow different package and service names.
- (instancetype)initWithHost:(NSString *)host
                 packageName:(NSString *)packageName
                 serviceName:(NSString *)serviceName {
  return [self initWithHost:host];
}

- (instancetype)initWithHost:(NSString *)host
                 packageName:(NSString *)packageName
                 serviceName:(NSString *)serviceName
                 callOptions:(GRPCCallOptions *)callOptions {
  return [self initWithHost:host callOptions:callOptions];
}

#pragma mark - Class Methods

+ (instancetype)serviceWithHost:(NSString *)host {
  return [[self alloc] initWithHost:host];
}

+ (instancetype)serviceWithHost:(NSString *)host callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [[self alloc] initWithHost:host callOptions:callOptions];
}

#pragma mark - Method Implementations

#pragma mark Unary(CoreMessage) returns (CoreMessage)

- (void)unaryWithRequest:(CoreMessage *)request handler:(void(^)(CoreMessage *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToUnaryWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
- (GRPCProtoCall *)RPCToUnaryWithRequest:(CoreMessage *)request handler:(void(^)(CoreMessage *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"Unary"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[CoreMessage class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
- (GRPCUnaryProtoCall *)unaryWithMessage:(CoreMessage *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"Unary"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[CoreMessage class]];
}

#pragma mark ServerStreaming(CoreMessage) returns (stream CoreMessage)

- (void)serverStreamingWithRequest:(CoreMessage *)request eventHandler:(void(^)(BOOL done, CoreMessage *_Nullable response, NSError *_Nullable error))eventHandler{
  [[self RPCToServerStreamingWithRequest:request eventHandler:eventHandler] start];
}
// Returns a not-yet-started RPC object.
- (GRPCProtoCall *)RPCToServerStreamingWithRequest:(CoreMessage *)request eventHandler:(void(^)(BOOL done, CoreMessage *_Nullable response, NSError *_Nullable error))eventHandler{
  return [self RPCToMethod:@"ServerStreaming"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[CoreMessage class]
        responsesWriteable:[GRXWriteable writeableWithEventHandler:eventHandler]];
}
- (GRPCUnaryProtoCall *)serverStreamingWithMessage:(CoreMessage *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"ServerStreaming"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[CoreMessage class]];
}

#pragma mark ClientStreaming(stream CoreMessage) returns (CoreMessage)

- (void)clientStreamingWithRequestsWriter:(GRXWriter *)requestWriter handler:(void(^)(CoreMessage *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToClientStreamingWithRequestsWriter:requestWriter handler:handler] start];
}
// Returns a not-yet-started RPC object.
- (GRPCProtoCall *)RPCToClientStreamingWithRequestsWriter:(GRXWriter *)requestWriter handler:(void(^)(CoreMessage *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"ClientStreaming"
            requestsWriter:requestWriter
             responseClass:[CoreMessage class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
- (GRPCStreamingProtoCall *)clientStreamingWithResponseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"ClientStreaming"
           responseHandler:handler
               callOptions:callOptions
             responseClass:[CoreMessage class]];
}

#pragma mark BidirectionalStreaming(stream CoreMessage) returns (stream CoreMessage)

- (void)bidirectionalStreamingWithRequestsWriter:(GRXWriter *)requestWriter eventHandler:(void(^)(BOOL done, CoreMessage *_Nullable response, NSError *_Nullable error))eventHandler{
  [[self RPCToBidirectionalStreamingWithRequestsWriter:requestWriter eventHandler:eventHandler] start];
}
// Returns a not-yet-started RPC object.
- (GRPCProtoCall *)RPCToBidirectionalStreamingWithRequestsWriter:(GRXWriter *)requestWriter eventHandler:(void(^)(BOOL done, CoreMessage *_Nullable response, NSError *_Nullable error))eventHandler{
  return [self RPCToMethod:@"BidirectionalStreaming"
            requestsWriter:requestWriter
             responseClass:[CoreMessage class]
        responsesWriteable:[GRXWriteable writeableWithEventHandler:eventHandler]];
}
- (GRPCStreamingProtoCall *)bidirectionalStreamingWithResponseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"BidirectionalStreaming"
           responseHandler:handler
               callOptions:callOptions
             responseClass:[CoreMessage class]];
}

@end
@implementation DIDCommEncrypted

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wobjc-designated-initializers"

// Designated initializer
- (instancetype)initWithHost:(NSString *)host callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [super initWithHost:host
                 packageName:@"didcomm.messaging"
                 serviceName:@"DIDCommEncrypted"
                 callOptions:callOptions];
}

- (instancetype)initWithHost:(NSString *)host {
  return [super initWithHost:host
                 packageName:@"didcomm.messaging"
                 serviceName:@"DIDCommEncrypted"];
}

#pragma clang diagnostic pop

// Override superclass initializer to disallow different package and service names.
- (instancetype)initWithHost:(NSString *)host
                 packageName:(NSString *)packageName
                 serviceName:(NSString *)serviceName {
  return [self initWithHost:host];
}

- (instancetype)initWithHost:(NSString *)host
                 packageName:(NSString *)packageName
                 serviceName:(NSString *)serviceName
                 callOptions:(GRPCCallOptions *)callOptions {
  return [self initWithHost:host callOptions:callOptions];
}

#pragma mark - Class Methods

+ (instancetype)serviceWithHost:(NSString *)host {
  return [[self alloc] initWithHost:host];
}

+ (instancetype)serviceWithHost:(NSString *)host callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [[self alloc] initWithHost:host callOptions:callOptions];
}

#pragma mark - Method Implementations

#pragma mark Unary(EncryptedMessage) returns (EncryptedMessage)

- (void)unaryWithRequest:(EncryptedMessage *)request handler:(void(^)(EncryptedMessage *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToUnaryWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
- (GRPCProtoCall *)RPCToUnaryWithRequest:(EncryptedMessage *)request handler:(void(^)(EncryptedMessage *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"Unary"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[EncryptedMessage class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
- (GRPCUnaryProtoCall *)unaryWithMessage:(EncryptedMessage *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"Unary"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[EncryptedMessage class]];
}

#pragma mark ServerStreaming(EncryptedMessage) returns (stream EncryptedMessage)

- (void)serverStreamingWithRequest:(EncryptedMessage *)request eventHandler:(void(^)(BOOL done, EncryptedMessage *_Nullable response, NSError *_Nullable error))eventHandler{
  [[self RPCToServerStreamingWithRequest:request eventHandler:eventHandler] start];
}
// Returns a not-yet-started RPC object.
- (GRPCProtoCall *)RPCToServerStreamingWithRequest:(EncryptedMessage *)request eventHandler:(void(^)(BOOL done, EncryptedMessage *_Nullable response, NSError *_Nullable error))eventHandler{
  return [self RPCToMethod:@"ServerStreaming"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[EncryptedMessage class]
        responsesWriteable:[GRXWriteable writeableWithEventHandler:eventHandler]];
}
- (GRPCUnaryProtoCall *)serverStreamingWithMessage:(EncryptedMessage *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"ServerStreaming"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[EncryptedMessage class]];
}

#pragma mark ClientStreaming(stream EncryptedMessage) returns (EncryptedMessage)

- (void)clientStreamingWithRequestsWriter:(GRXWriter *)requestWriter handler:(void(^)(EncryptedMessage *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToClientStreamingWithRequestsWriter:requestWriter handler:handler] start];
}
// Returns a not-yet-started RPC object.
- (GRPCProtoCall *)RPCToClientStreamingWithRequestsWriter:(GRXWriter *)requestWriter handler:(void(^)(EncryptedMessage *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"ClientStreaming"
            requestsWriter:requestWriter
             responseClass:[EncryptedMessage class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
- (GRPCStreamingProtoCall *)clientStreamingWithResponseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"ClientStreaming"
           responseHandler:handler
               callOptions:callOptions
             responseClass:[EncryptedMessage class]];
}

#pragma mark BidirectionalStreaming(stream EncryptedMessage) returns (stream EncryptedMessage)

- (void)bidirectionalStreamingWithRequestsWriter:(GRXWriter *)requestWriter eventHandler:(void(^)(BOOL done, EncryptedMessage *_Nullable response, NSError *_Nullable error))eventHandler{
  [[self RPCToBidirectionalStreamingWithRequestsWriter:requestWriter eventHandler:eventHandler] start];
}
// Returns a not-yet-started RPC object.
- (GRPCProtoCall *)RPCToBidirectionalStreamingWithRequestsWriter:(GRXWriter *)requestWriter eventHandler:(void(^)(BOOL done, EncryptedMessage *_Nullable response, NSError *_Nullable error))eventHandler{
  return [self RPCToMethod:@"BidirectionalStreaming"
            requestsWriter:requestWriter
             responseClass:[EncryptedMessage class]
        responsesWriteable:[GRXWriteable writeableWithEventHandler:eventHandler]];
}
- (GRPCStreamingProtoCall *)bidirectionalStreamingWithResponseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"BidirectionalStreaming"
           responseHandler:handler
               callOptions:callOptions
             responseClass:[EncryptedMessage class]];
}

@end
@implementation DIDCommSimplex

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wobjc-designated-initializers"

// Designated initializer
- (instancetype)initWithHost:(NSString *)host callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [super initWithHost:host
                 packageName:@"didcomm.messaging"
                 serviceName:@"DIDCommSimplex"
                 callOptions:callOptions];
}

- (instancetype)initWithHost:(NSString *)host {
  return [super initWithHost:host
                 packageName:@"didcomm.messaging"
                 serviceName:@"DIDCommSimplex"];
}

#pragma clang diagnostic pop

// Override superclass initializer to disallow different package and service names.
- (instancetype)initWithHost:(NSString *)host
                 packageName:(NSString *)packageName
                 serviceName:(NSString *)serviceName {
  return [self initWithHost:host];
}

- (instancetype)initWithHost:(NSString *)host
                 packageName:(NSString *)packageName
                 serviceName:(NSString *)serviceName
                 callOptions:(GRPCCallOptions *)callOptions {
  return [self initWithHost:host callOptions:callOptions];
}

#pragma mark - Class Methods

+ (instancetype)serviceWithHost:(NSString *)host {
  return [[self alloc] initWithHost:host];
}

+ (instancetype)serviceWithHost:(NSString *)host callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [[self alloc] initWithHost:host callOptions:callOptions];
}

#pragma mark - Method Implementations

#pragma mark Simplex(EncryptedMessage) returns (NoOp)

- (void)simplexWithRequest:(EncryptedMessage *)request handler:(void(^)(NoOp *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToSimplexWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
- (GRPCProtoCall *)RPCToSimplexWithRequest:(EncryptedMessage *)request handler:(void(^)(NoOp *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"Simplex"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[NoOp class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
- (GRPCUnaryProtoCall *)simplexWithMessage:(EncryptedMessage *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"Simplex"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[NoOp class]];
}

@end
#endif
